name: Deploy

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  push_to_registry:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.REPO_NAME }}
          tags: latest

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}

  server_update:
    needs: push_to_registry
    name: Deploy to server
    runs-on: ubuntu-latest
    steps:
      - name: Set up SSH agent
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: Connect
        uses: appleboy/ssh-action@master
        env:
          IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.REPO_NAME }}
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USER }}
          envs: IMAGE_NAME
          script: |
            # Check if IMAGE_NAME is empty
            if [ -z "$IMAGE_NAME" ]; then
              echo "ERROR: IMAGE_NAME environment variable is empty"
              exit 1
            fi

            echo "Image name - $IMAGE_NAME"
            echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
            
            echo "Removing image existing container"
            containers=$(docker ps -q --filter ancestor="$IMAGE_NAME")
            if [ -n "$containers" ]; then
              docker stop "$containers"
            fi

            echo "Removing stopped container"
            echo "Removing stopped container"
            docker ps -a -q --filter ancestor="$IMAGE_NAME" | xargs -r docker rm
  
            echo "Removing old dated image"
            docker images -q "$IMAGE_NAME" | xargs -r docker rmi
            echo "Pullin an image"
            docker pull "$IMAGE_NAME"
            echo "Running an image"
            docker run -p 0.0.0.0:1616:1616 --network=microservices_network --name diabetes-django-model --restart unless-stopped --name diabetes-django -d "$IMAGE_NAME"
          key: ${{ secrets.SSH_PRIVATE_KEY }}
#          script_stop: true
#          script: bash deploy.sh